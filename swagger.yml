---
swagger: "2.0"
info:
  description: "PKG"
  version: "2020-08-24T09:41:19Z"
  title: "PARKING APP"
basePath: "/"
schemes:
  - "https"
paths:
  /streams:
    get:
      summary: "カメラ情報取得API"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          description: "認証基盤に検証用のIDtoken"
          in: "header"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/GetStreams"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetStreams.Arn}/invocations
        httpMethod: "POST"
        responses:
          ".*statusCode.*: 400.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          ".*statusCode.*: 500.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
  /streams/{uuid}:
    put:
      summary: "カメラ情報変更API"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "uuid"
          description: "変更対象のカメラのuuid"
          in: "path"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            required:
              - stream_name
              - capacity
            properties:
              stream_name:
                type: "string"
                minLength: 1
                maxLength: 20
              capacity:
                type: "integer"
                minimum: 1
                maximum: 999
        - name: "Authorization"
          description: "認証基盤に検証用のIDtoken"
          in: "header"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Stream"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateStreamInfo.Arn}/invocations
        httpMethod: "POST"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          .*statusCode.*:.*500.*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          .*statusCode.*:.*400.*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "uuid"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
  /data/latest:
    get:
      summary: "データ取得API: リアルタイム情報"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          description: "変更対象のカメラのuuid"
          in: "header"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/GetRealtimeData"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRealTimeCount.Arn}/invocations
        httpMethod: "POST"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
        responses:
          ".*statusCode.*: 400.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          ".*statusCode.*: 500.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
  /data:
    get:
      summary: "データ取得API: 期間指定"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "start_date"
          description: "期間指定:集計開始日"
          in: "query"
          required: true
          type: "string"
        - name: "end_date"
          description: "期間指定:集計終了日"
          in: "query"
          required: true
          type: "string"
        - name: "Authorization"
          description: "認証基盤に検証用のIDtoken"
          in: "header"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/GetReportData"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      # security:
      # - apc: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetModeCount.Arn}/invocations
        httpMethod: "POST"
        responses:
          ".*statusCode.*: 400.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          ".*statusCode.*: 500.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"

definitions:
  Empty:
    type: "object"
    title: "Empty Schema"
  GetRealtimeData:
    type: "object"
    properties:
      results:
        type: "array"
        items:
          type: "object"
          properties:
            uuid:
              type: "string"
            count:
              type: "integer"
            fillrate:
              type: "integer"
            status:
              type: string
              enum:
                - VACANT
                - CROWDED
                - FULL
  GetReportData:
    type: "object"
    properties:
      results:
        type: "array"
        items:
          type: "object"
          properties:
            uuid:
              type: "string"
            data:
              type: "array"
              items:
                type: "object"
                properties:
                  date:
                    type: "string"
                  counts:
                    type: "array"
                    items:
                      type: "integer"

  Stream:
    type: "object"
    properties:
      uuid:
        type: "string"
      stream_name:
        type: "string"

      capacity:
        type: "integer"
  GetStreams:
    type: "object"
    properties:
      streams:
        type: "array"
        items:
          type: "object"
          properties:
            uuid:
              type: "string"
            stream_name:
              type: "string"
            capacity:
              type: "integer"

x-amazon-apigateway-gateway-responses:
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
    responseTemplates:
      application/json: '{"message":$context.error.messageString}'
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
    responseTemplates:
      application/json: '{"message":$context.error.messageString}'
x-amazon-apigateway-request-validators:
  basic:
    validateRequestParameters: true
    validateRequestBody: true
x-amazon-apigateway-request-validator : basic